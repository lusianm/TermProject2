###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         21/Dec/2020  20:19:39
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =  D:\Programming\TermProject2\user\FB755AC.c
#    Command line      =
#        -f C:\Users\ziop2\AppData\Local\Temp\EWD792.tmp
#        (D:\Programming\TermProject2\user\FB755AC.c -D USE_STDPERIPH_DRIVER -D
#        STM32F10X_CL -lC D:\Programming\TermProject2\Debug\List -o
#        D:\Programming\TermProject2\Debug\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\Programming\TermProject2\Libraries\CMSIS\DeviceSupport\Startup\\ -I
#        D:\Programming\TermProject2\Libraries\CMSIS\DeviceSupport\\ -I
#        D:\Programming\TermProject2\Libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\\
#        -I
#        D:\Programming\TermProject2\Libraries\STM32F10x_StdPeriph_Driver_v3.5\src\\
#        -I D:\Programming\TermProject2\user\\ -I
#        D:\Programming\TermProject2\user\inc\\ -Ol -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.4\arm\CMSIS\Core\Include\\" -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\CMSIS\DSP\Include\\")
#    Locale            =  C
#    List file         =  D:\Programming\TermProject2\Debug\List\FB755AC.lst
#    Object file       =  D:\Programming\TermProject2\Debug\Obj\FB755AC.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#      __size_limit    =  32768|ARM.EW.LINKER
#
###############################################################################

D:\Programming\TermProject2\user\FB755AC.c
      1          #include "FB755AC.h"
      2          #include "stm32f10x.h"
      3          #include "lcd.h"
      4          

   \                                 In section .bss, align 4
      5          uint16_t prevDataBuffer[100] = {0, };
   \                     prevDataBuffer:
   \        0x0                      DS8 200

   \                                 In section .bss, align 4
      6          int prevDataBufferIdx = 0;
   \                     prevDataBufferIdx:
   \        0x0                      DS8 4

   \                                 In section .bss, align 2
      7          uint16_t prevData = 0;
   \                     prevData:
   \        0x0                      DS8 2

   \                                 In section .bss, align 4
      8          int BTState = 0;
   \                     BTState:
   \        0x0                      DS8 4
      9          //0 : Start
     10          //1 : Paging 요청
     11          //2 : Connect 대기
     12          //3 : Connect 완료
     13          

   \                                 In section .data, align 2
     14          uint16_t RCCommand = 's';
   \                     RCCommand:
   \        0x0   0x0073             DC16 115
     15          

   \                                 In section .text, align 2, keep-with-next
     16          uint16_t FB755ACGetCommand(){
     17            uint16_t tempCommand = RCCommand;
   \                     FB755ACGetCommand: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable9
   \        0x2   0x8808             LDRH     R0,[R1, #+0]
     18            RCCommand = 's';
   \        0x4   0x2273             MOVS     R2,#+115
   \        0x6   0x800A             STRH     R2,[R1, #+0]
     19            return tempCommand;
   \        0x8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \        0xA   0x4770             BX       LR               ;; return
     20          }
     21          

   \                                 In section .text, align 2, keep-with-next
     22          int GetBTState(){
     23            return BTState;
   \                     GetBTState: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable9_1
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
     24          }
     25          

   \                                 In section .text, align 2, keep-with-next
     26          int IsBTReady(){
     27            return (BTState == 3);
   \                     IsBTReady: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable9_1
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x2803             CMP      R0,#+3
   \        0x6   0xD101             BNE.N    ??IsBTReady_0
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xE000             B.N      ??IsBTReady_1
   \                     ??IsBTReady_0: (+1)
   \        0xC   0x2000             MOVS     R0,#+0
   \                     ??IsBTReady_1: (+1)
   \        0xE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x10   0x4770             BX       LR               ;; return
     28          }
     29          

   \                                 In section .text, align 2, keep-with-next
     30          int IsBTOK(){
     31            if(prevDataBuffer[0] == 'O' && prevDataBuffer[1] == 'K' && prevDataBuffer[2] == 0x0D && prevDataBuffer[3] == 0x0A){
   \                     IsBTOK: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable9_2
   \        0x2   0x8801             LDRH     R1,[R0, #+0]
   \        0x4   0x294F             CMP      R1,#+79
   \        0x6   0xD10A             BNE.N    ??IsBTOK_0
   \        0x8   0x8841             LDRH     R1,[R0, #+2]
   \        0xA   0x294B             CMP      R1,#+75
   \        0xC   0xD107             BNE.N    ??IsBTOK_0
   \        0xE   0x8881             LDRH     R1,[R0, #+4]
   \       0x10   0x290D             CMP      R1,#+13
   \       0x12   0xD104             BNE.N    ??IsBTOK_0
   \       0x14   0x88C0             LDRH     R0,[R0, #+6]
   \       0x16   0x280A             CMP      R0,#+10
   \       0x18   0xD101             BNE.N    ??IsBTOK_0
     32              return 1;
   \       0x1A   0x2001             MOVS     R0,#+1
   \       0x1C   0xE000             B.N      ??IsBTOK_1
     33            }
     34            else
     35              return 0;
   \                     ??IsBTOK_0: (+1)
   \       0x1E   0x2000             MOVS     R0,#+0
   \                     ??IsBTOK_1: (+1)
   \       0x20   0x4770             BX       LR               ;; return
     36          }
     37          

   \                                 In section .text, align 2, keep-with-next
     38          int IsBTCONNECT(){
     39            if(prevDataBuffer[0] == 'C' && prevDataBuffer[1] == 'O' && prevDataBuffer[2] == 'N' && prevDataBuffer[3] == 'N' && prevDataBuffer[4] == 'E' &&prevDataBuffer[5] == 'C' &&prevDataBuffer[6] == 'T'){
   \                     IsBTCONNECT: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable9_2
   \        0x2   0x8801             LDRH     R1,[R0, #+0]
   \        0x4   0x2943             CMP      R1,#+67
   \        0x6   0xD113             BNE.N    ??IsBTCONNECT_0
   \        0x8   0x8841             LDRH     R1,[R0, #+2]
   \        0xA   0x294F             CMP      R1,#+79
   \        0xC   0xD110             BNE.N    ??IsBTCONNECT_0
   \        0xE   0x8881             LDRH     R1,[R0, #+4]
   \       0x10   0x294E             CMP      R1,#+78
   \       0x12   0xD10D             BNE.N    ??IsBTCONNECT_0
   \       0x14   0x88C1             LDRH     R1,[R0, #+6]
   \       0x16   0x294E             CMP      R1,#+78
   \       0x18   0xD10A             BNE.N    ??IsBTCONNECT_0
   \       0x1A   0x8901             LDRH     R1,[R0, #+8]
   \       0x1C   0x2945             CMP      R1,#+69
   \       0x1E   0xD107             BNE.N    ??IsBTCONNECT_0
   \       0x20   0x8941             LDRH     R1,[R0, #+10]
   \       0x22   0x2943             CMP      R1,#+67
   \       0x24   0xD104             BNE.N    ??IsBTCONNECT_0
   \       0x26   0x8980             LDRH     R0,[R0, #+12]
   \       0x28   0x2854             CMP      R0,#+84
   \       0x2A   0xD101             BNE.N    ??IsBTCONNECT_0
     40              return 1;
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0xE000             B.N      ??IsBTCONNECT_1
     41            }
     42            else
     43              return 0;
   \                     ??IsBTCONNECT_0: (+1)
   \       0x30   0x2000             MOVS     R0,#+0
   \                     ??IsBTCONNECT_1: (+1)
   \       0x32   0x4770             BX       LR               ;; return
     44          }
     45          

   \                                 In section .text, align 2, keep-with-next
     46          int IsBTDISCONNECT(){
     47            if(prevDataBuffer[0] == 'D' && prevDataBuffer[1] == 'I' && prevDataBuffer[2] == 'S' && prevDataBuffer[3] == 'C' && prevDataBuffer[4] == 'O' && prevDataBuffer[5] == 'N' && prevDataBuffer[6] == 'N' && prevDataBuffer[7] == 'E' &&prevDataBuffer[8] == 'C' &&prevDataBuffer[9] == 'T'){
   \                     IsBTDISCONNECT: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable9_2
   \        0x2   0x8801             LDRH     R1,[R0, #+0]
   \        0x4   0x2944             CMP      R1,#+68
   \        0x6   0xD11C             BNE.N    ??IsBTDISCONNECT_0
   \        0x8   0x8841             LDRH     R1,[R0, #+2]
   \        0xA   0x2949             CMP      R1,#+73
   \        0xC   0xD119             BNE.N    ??IsBTDISCONNECT_0
   \        0xE   0x8881             LDRH     R1,[R0, #+4]
   \       0x10   0x2953             CMP      R1,#+83
   \       0x12   0xD116             BNE.N    ??IsBTDISCONNECT_0
   \       0x14   0x88C1             LDRH     R1,[R0, #+6]
   \       0x16   0x2943             CMP      R1,#+67
   \       0x18   0xD113             BNE.N    ??IsBTDISCONNECT_0
   \       0x1A   0x8901             LDRH     R1,[R0, #+8]
   \       0x1C   0x294F             CMP      R1,#+79
   \       0x1E   0xD110             BNE.N    ??IsBTDISCONNECT_0
   \       0x20   0x8941             LDRH     R1,[R0, #+10]
   \       0x22   0x294E             CMP      R1,#+78
   \       0x24   0xD10D             BNE.N    ??IsBTDISCONNECT_0
   \       0x26   0x8981             LDRH     R1,[R0, #+12]
   \       0x28   0x294E             CMP      R1,#+78
   \       0x2A   0xD10A             BNE.N    ??IsBTDISCONNECT_0
   \       0x2C   0x89C1             LDRH     R1,[R0, #+14]
   \       0x2E   0x2945             CMP      R1,#+69
   \       0x30   0xD107             BNE.N    ??IsBTDISCONNECT_0
   \       0x32   0x8A01             LDRH     R1,[R0, #+16]
   \       0x34   0x2943             CMP      R1,#+67
   \       0x36   0xD104             BNE.N    ??IsBTDISCONNECT_0
   \       0x38   0x8A40             LDRH     R0,[R0, #+18]
   \       0x3A   0x2854             CMP      R0,#+84
   \       0x3C   0xD101             BNE.N    ??IsBTDISCONNECT_0
     48              return 1;
   \       0x3E   0x2001             MOVS     R0,#+1
   \       0x40   0xE000             B.N      ??IsBTDISCONNECT_1
     49            }
     50            else
     51              return 0;
   \                     ??IsBTDISCONNECT_0: (+1)
   \       0x42   0x2000             MOVS     R0,#+0
   \                     ??IsBTDISCONNECT_1: (+1)
   \       0x44   0x4770             BX       LR               ;; return
     52          }
     53          

   \                                 In section .text, align 2, keep-with-next
     54          void AutoConnectReady(){
   \                     AutoConnectReady: (+1)
   \        0x0   0xB518             PUSH     {R3,R4,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
     55            uint16_t data[10] = {'A', 'T', '+', 'B', 'T', 'S', 'C', 'A', 'N', 0x0D};
   \        0x4   0x4668             MOV      R0,SP
   \        0x6   0x....             LDR.N    R1,??DataTable9_3
   \        0x8   0x2214             MOVS     R2,#+20
   \        0xA   0x....'....        BL       __aeabi_memcpy4
     56            for(int i = 0; i < 10; i++){
   \        0xE   0x2400             MOVS     R4,#+0
   \       0x10   0xE009             B.N      ??AutoConnectReady_0
     57              while ((USART1->SR & USART_SR_TC) == 0);
   \                     ??AutoConnectReady_1: (+1)
   \       0x12   0x....             LDR.N    R0,??DataTable9_4  ;; 0x40013800
   \       0x14   0x8801             LDRH     R1,[R0, #+0]
   \       0x16   0x0649             LSLS     R1,R1,#+25
   \       0x18   0xD5FB             BPL.N    ??AutoConnectReady_1
     58              USART_SendData(BTUSART, data[i]);
   \       0x1A   0x4669             MOV      R1,SP
   \       0x1C   0xF831 0x1014      LDRH     R1,[R1, R4, LSL #+1]
   \       0x20   0x....'....        BL       USART_SendData
     59            }
   \       0x24   0x1C64             ADDS     R4,R4,#+1
   \                     ??AutoConnectReady_0: (+1)
   \       0x26   0x2C0A             CMP      R4,#+10
   \       0x28   0xDBF3             BLT.N    ??AutoConnectReady_1
     60          }
   \       0x2A   0xB006             ADD      SP,SP,#+24
   \       0x2C   0xBD10             POP      {R4,PC}          ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          static void InitPins() {
   \                     InitPins: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
     63            GPIO_InitTypeDef GPIO_InitStructure;
     64            
     65            //TX
     66            GPIO_InitStructure.GPIO_Pin = USARTPinTX;
   \        0x2   0xF44F 0x7000      MOV      R0,#+512
   \        0x6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     67            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \        0xA   0x2003             MOVS     R0,#+3
   \        0xC   0xF88D 0x0002      STRB     R0,[SP, #+2]
     68            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;       
   \       0x10   0x2018             MOVS     R0,#+24
   \       0x12   0xF88D 0x0003      STRB     R0,[SP, #+3]
     69            GPIO_Init(USARTPort, &GPIO_InitStructure);
   \       0x16   0x....             LDR.N    R4,??DataTable9_5  ;; 0x40010800
   \       0x18   0x4669             MOV      R1,SP
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x....'....        BL       GPIO_Init
     70            
     71            //RX
     72            GPIO_InitStructure.GPIO_Pin = USARTPinRX;
   \       0x20   0xF44F 0x6080      MOV      R0,#+1024
   \       0x24   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     73            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;       
   \       0x28   0x2048             MOVS     R0,#+72
   \       0x2A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     74            GPIO_Init(USARTPort, &GPIO_InitStructure);
   \       0x2E   0x4669             MOV      R1,SP
   \       0x30   0x0020             MOVS     R0,R4
   \       0x32   0x....'....        BL       GPIO_Init
     75          }
   \       0x36   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void USART1_Init(void)
     78          {
   \                     USART1_Init: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
     79              USART_InitTypeDef USART1_InitStructure;
     80          
     81              // Enable the USART1 peripheral
     82              USART_Cmd(USART1, ENABLE);
   \        0x2   0x....             LDR.N    R4,??DataTable9_4  ;; 0x40013800
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x....'....        BL       USART_Cmd
     83          
     84              // TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
     85                 //@ USART Word Length : 8 bit
     86              USART1_InitStructure.USART_WordLength = USART_WordLength_8b;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     87              //@ USART Stop Bit : 1
     88              USART1_InitStructure.USART_StopBits = USART_StopBits_1;
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     89              //@ USART Parity bit : None
     90              USART1_InitStructure.USART_Parity = USART_Parity_No;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     91              //@ USART Mode : RX, TX
     92              USART1_InitStructure.USART_Mode = (USART_Mode_Rx | USART_Mode_Tx);
   \       0x1E   0x200C             MOVS     R0,#+12
   \       0x20   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     93              //@ Hardware Flow Control : Node
     94              USART1_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF8AD 0x000C      STRH     R0,[SP, #+12]
     95              //@ Serial BaudRate : 9600
     96              USART1_InitStructure.USART_BaudRate = 9600;
   \       0x2A   0xF44F 0x5016      MOV      R0,#+9600
   \       0x2E   0x9000             STR      R0,[SP, #+0]
     97              USART_Init(USART1, &USART1_InitStructure);
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0x0020             MOVS     R0,R4
   \       0x34   0x....'....        BL       USART_Init
     98              // TODO: Enable the USART1 RX interrupts using the function 'USART_ITConfig' and the argument value 'Receive Data register not empty interrupt'
     99              //@ RXNE : Rx Not Empty
    100              USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
   \       0x38   0x2201             MOVS     R2,#+1
   \       0x3A   0xF240 0x5125      MOVW     R1,#+1317
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x....'....        BL       USART_ITConfig
    101          }
   \       0x44   0xBD1F             POP      {R0-R4,PC}       ;; return
    102          
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void USART1_IRQHandler() {
   \                     USART1_IRQHandler: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    105              uint16_t word;
    106              if (USART_GetITStatus(BTUSART, USART_IT_RXNE) != RESET) {
   \        0x4   0x....             LDR.N    R4,??DataTable9_4  ;; 0x40013800
   \        0x6   0xF240 0x5525      MOVW     R5,#+1317
   \        0xA   0x0029             MOVS     R1,R5
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x....'....        BL       USART_GetITStatus
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xF000 0x8090      BEQ.W    ??USART1_IRQHandler_0
    107                  // the most recent received data by the USART1 peripheral
    108                  //@ UART2의 입력을 word에 저장
    109                  word = USART_ReceiveData(BTUSART);
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x....'....        BL       USART_ReceiveData
   \       0x1E   0x0006             MOVS     R6,R0
    110                  if(word == 'f' || word == 'b' || word =='r' || word =='l' || word == 's')
   \       0x20   0x0030             MOVS     R0,R6
   \       0x22   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x24   0x2866             CMP      R0,#+102
   \       0x26   0xD00F             BEQ.N    ??USART1_IRQHandler_1
   \       0x28   0x0030             MOVS     R0,R6
   \       0x2A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x2C   0x2862             CMP      R0,#+98
   \       0x2E   0xD00B             BEQ.N    ??USART1_IRQHandler_1
   \       0x30   0x0030             MOVS     R0,R6
   \       0x32   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x34   0x2872             CMP      R0,#+114
   \       0x36   0xD007             BEQ.N    ??USART1_IRQHandler_1
   \       0x38   0x0030             MOVS     R0,R6
   \       0x3A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x3C   0x286C             CMP      R0,#+108
   \       0x3E   0xD003             BEQ.N    ??USART1_IRQHandler_1
   \       0x40   0x0030             MOVS     R0,R6
   \       0x42   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x44   0x2873             CMP      R0,#+115
   \       0x46   0xD101             BNE.N    ??USART1_IRQHandler_2
    111                    RCCommand = word;
   \                     ??USART1_IRQHandler_1: (+1)
   \       0x48   0x....             LDR.N    R0,??DataTable9
   \       0x4A   0x8006             STRH     R6,[R0, #+0]
    112                  prevDataBuffer[prevDataBufferIdx] = word;
   \                     ??USART1_IRQHandler_2: (+1)
   \       0x4C   0x....'....        LDR.W    R8,??DataTable9_6
   \       0x50   0x....             LDR.N    R7,??DataTable9_2
   \       0x52   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x56   0xF827 0x6010      STRH     R6,[R7, R0, LSL #+1]
    113                  prevDataBufferIdx++;
   \       0x5A   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x5E   0x1C40             ADDS     R0,R0,#+1
   \       0x60   0xF8C8 0x0000      STR      R0,[R8, #+0]
    114                  prevDataBufferIdx %= 100;
   \       0x64   0x2064             MOVS     R0,#+100
   \       0x66   0xF8D8 0x1000      LDR      R1,[R8, #+0]
   \       0x6A   0xF8D8 0x2000      LDR      R2,[R8, #+0]
   \       0x6E   0xFB92 0xF2F0      SDIV     R2,R2,R0
   \       0x72   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \       0x76   0xF8C8 0x0000      STR      R0,[R8, #+0]
    115                  if(prevData == 0x0D && word == 0x0A){
   \       0x7A   0x....'....        LDR.W    R9,??DataTable9_7
   \       0x7E   0xF8B9 0x0000      LDRH     R0,[R9, #+0]
   \       0x82   0x280D             CMP      R0,#+13
   \       0x84   0xD152             BNE.N    ??USART1_IRQHandler_3
   \       0x86   0x0030             MOVS     R0,R6
   \       0x88   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x8A   0x280A             CMP      R0,#+10
   \       0x8C   0xD14E             BNE.N    ??USART1_IRQHandler_3
    116                    if(prevDataBufferIdx > 3){
   \       0x8E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \       0x92   0x2804             CMP      R0,#+4
   \       0x94   0xDB3F             BLT.N    ??USART1_IRQHandler_4
    117                      switch(BTState){
   \       0x96   0x....'....        LDR.W    R10,??DataTable9_1
   \       0x9A   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \       0x9E   0x2800             CMP      R0,#+0
   \       0xA0   0xD005             BEQ.N    ??USART1_IRQHandler_5
   \       0xA2   0x2802             CMP      R0,#+2
   \       0xA4   0xD020             BEQ.N    ??USART1_IRQHandler_6
   \       0xA6   0xD310             BCC.N    ??USART1_IRQHandler_7
   \       0xA8   0x2803             CMP      R0,#+3
   \       0xAA   0xD029             BEQ.N    ??USART1_IRQHandler_8
   \       0xAC   0xE033             B.N      ??USART1_IRQHandler_4
    118                      case 0:
    119                        if(IsBTOK()){
   \                     ??USART1_IRQHandler_5: (+1)
   \       0xAE   0x....'....        BL       IsBTOK
   \       0xB2   0x2800             CMP      R0,#+0
   \       0xB4   0xD008             BEQ.N    ??USART1_IRQHandler_9
    120                          LCD_Clear(BRRED);
   \       0xB6   0xF64F 0x4007      MOVW     R0,#+64519
   \       0xBA   0x....'....        BL       LCD_Clear
    121                          BTState = 1;
   \       0xBE   0x2001             MOVS     R0,#+1
   \       0xC0   0xF8CA 0x0000      STR      R0,[R10, #+0]
    122                          AutoConnectReady();
   \       0xC4   0x....'....        BL       AutoConnectReady
    123                        }              
    124                        break;
   \                     ??USART1_IRQHandler_9: (+1)
   \       0xC8   0xE025             B.N      ??USART1_IRQHandler_4
    125                      
    126                      case 1:
    127                        if(!IsBTOK()){
   \                     ??USART1_IRQHandler_7: (+1)
   \       0xCA   0x....'....        BL       IsBTOK
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD102             BNE.N    ??USART1_IRQHandler_10
    128                          AutoConnectReady();
   \       0xD2   0x....'....        BL       AutoConnectReady
   \       0xD6   0xE006             B.N      ??USART1_IRQHandler_11
    129                        }
    130                        else{
    131                          LCD_Clear(GREEN);
   \                     ??USART1_IRQHandler_10: (+1)
   \       0xD8   0xF44F 0x60FC      MOV      R0,#+2016
   \       0xDC   0x....'....        BL       LCD_Clear
    132                          BTState = 2;
   \       0xE0   0x2002             MOVS     R0,#+2
   \       0xE2   0xF8CA 0x0000      STR      R0,[R10, #+0]
    133                        }
    134                        break;
   \                     ??USART1_IRQHandler_11: (+1)
   \       0xE6   0xE016             B.N      ??USART1_IRQHandler_4
    135                        
    136                      case 2:
    137                        if(IsBTCONNECT()){
   \                     ??USART1_IRQHandler_6: (+1)
   \       0xE8   0x....'....        BL       IsBTCONNECT
   \       0xEC   0x2800             CMP      R0,#+0
   \       0xEE   0xD006             BEQ.N    ??USART1_IRQHandler_12
    138                          LCD_Clear(WHITE);
   \       0xF0   0xF64F 0x70FF      MOVW     R0,#+65535
   \       0xF4   0x....'....        BL       LCD_Clear
    139                          BTState = 3;
   \       0xF8   0x2003             MOVS     R0,#+3
   \       0xFA   0xF8CA 0x0000      STR      R0,[R10, #+0]
    140                        }
    141                        break;
   \                     ??USART1_IRQHandler_12: (+1)
   \       0xFE   0xE00A             B.N      ??USART1_IRQHandler_4
    142                      case 3:
    143                        if(IsBTDISCONNECT()){
   \                     ??USART1_IRQHandler_8: (+1)
   \      0x100   0x....'....        BL       IsBTDISCONNECT
   \      0x104   0x2800             CMP      R0,#+0
   \      0x106   0xD006             BEQ.N    ??USART1_IRQHandler_13
    144                          LCD_Clear(GREEN);
   \      0x108   0xF44F 0x60FC      MOV      R0,#+2016
   \      0x10C   0x....'....        BL       LCD_Clear
    145                          BTState = 2;                
   \      0x110   0x2002             MOVS     R0,#+2
   \      0x112   0xF8CA 0x0000      STR      R0,[R10, #+0]
    146                        }
    147                        break;
    148                      
    149                      }
    150                    }
    151                    prevDataBufferIdx = 0;
   \                     ??USART1_IRQHandler_13: (+1)
   \                     ??USART1_IRQHandler_4: (+1)
   \      0x116   0x2000             MOVS     R0,#+0
   \      0x118   0xF8C8 0x0000      STR      R0,[R8, #+0]
    152                    for(int i = 0; i < 100; i++){
   \      0x11C   0x2000             MOVS     R0,#+0
   \      0x11E   0xE003             B.N      ??USART1_IRQHandler_14
    153                      prevDataBuffer[i] = 0;
   \                     ??USART1_IRQHandler_15: (+1)
   \      0x120   0x2100             MOVS     R1,#+0
   \      0x122   0xF827 0x1010      STRH     R1,[R7, R0, LSL #+1]
    154                    }
   \      0x126   0x1C40             ADDS     R0,R0,#+1
   \                     ??USART1_IRQHandler_14: (+1)
   \      0x128   0x2864             CMP      R0,#+100
   \      0x12A   0xDBF9             BLT.N    ??USART1_IRQHandler_15
    155                  }
    156                  prevData = word;      
   \                     ??USART1_IRQHandler_3: (+1)
   \      0x12C   0xF8A9 0x6000      STRH     R6,[R9, #+0]
    157                  // clear 'Read data register not empty' flag
    158                  USART_ClearITPendingBit(BTUSART, USART_IT_RXNE);        
   \      0x130   0x0029             MOVS     R1,R5
   \      0x132   0x0020             MOVS     R0,R4
   \      0x134   0x....'....        BL       USART_ClearITPendingBit
    159              }
    160          }
   \                     ??USART1_IRQHandler_0: (+1)
   \      0x138   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    161          
    162          

   \                                 In section .text, align 2, keep-with-next
    163          void FB755ACInit(){
   \                     FB755ACInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    164            InitPins();
   \        0x2   0x....'....        BL       InitPins
    165            USART1_Init();
   \        0x6   0x....'....        BL       USART1_Init
    166          }
   \        0xA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0x....'....        DC32     RCCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0x....'....        DC32     BTState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x....'....        DC32     prevDataBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x4001'3800        DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x....'....        DC32     prevDataBufferIdx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x....'....        DC32     prevData

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x0041 0x0054      DC16 65, 84, 43, 66, 84, 83, 67, 65, 78, 13

   \               0x002B 0x004

   \              2 0x0054 0x00

   \              53 0x0043 0x0

   \              041 0x004E 0x

   \              000D

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   AutoConnectReady
        32   -> USART_SendData
        32   -> __aeabi_memcpy4
       0   FB755ACGetCommand
       8   FB755ACInit
         8   -> InitPins
         8   -> USART1_Init
       0   GetBTState
      16   InitPins
        16   -> GPIO_Init
       0   IsBTCONNECT
       0   IsBTDISCONNECT
       0   IsBTOK
       0   IsBTReady
      32   USART1_IRQHandler
        32   -> AutoConnectReady
        32   -> IsBTCONNECT
        32   -> IsBTDISCONNECT
        32   -> IsBTOK
        32   -> LCD_Clear
        32   -> USART_ClearITPendingBit
        32   -> USART_GetITStatus
        32   -> USART_ReceiveData
      24   USART1_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
      20  ?_0
      46  AutoConnectReady
       4  BTState
      12  FB755ACGetCommand
      12  FB755ACInit
       6  GetBTState
      56  InitPins
      52  IsBTCONNECT
      70  IsBTDISCONNECT
      34  IsBTOK
      18  IsBTReady
       2  RCCommand
     316  USART1_IRQHandler
      70  USART1_Init
       2  prevData
     200  prevDataBuffer
       4  prevDataBufferIdx

 
 210 bytes in section .bss
   2 bytes in section .data
  20 bytes in section .rodata
 724 bytes in section .text
 
 724 bytes of CODE  memory
  20 bytes of CONST memory
 212 bytes of DATA  memory

Errors: none
Warnings: none
